"Validate the level kinds"
enum Level {
    beginner
    intermediate
    advanced
}

type Course {
    uuid_course: ID!
    title: String!
    teacher: String
    description: String!
    topic: String @deprecated
    students: [Person]
    level: Level
}

interface Person {
    uuid_student: ID!
    name: String!
    email: String!
}


type Monitor implements Person {
    uuid_student: ID!
    name: String!
    email: String!
    phone: String
}

type Student implements Person {
    uuid_student: ID!
    name: String!
    email: String!
    avatar: String
}

type Query {
    "Return all courses"
    getCourses: [Course]
    "Return a course"
    getCourse(uuid_course: ID!): Course
    "Return all students"
    getPeople: [Person]
    "Return a student"
    getPerson(uuid_student: ID!): Person
    
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
    level: Level
}

input PersonInput {
    name: String!
    email: String!
    phone: String
    avatar: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String
}

type Mutation {
    "Create a course"
    createCourse(input: CourseInput!): Course
    "Edit a course"
    editCourse(uuid_course:ID! ,input: CourseEditInput!): Course
    "Delete a course"
    deleteCourse(uuid_course:ID!): Boolean
    "Create a erson"
    createPerson(input: PersonInput!): Person
    "Edit a person"
    editPerson(uuid_student:ID!, input: PersonEditInput!): Student
    "Delete a person"
    deletePerson(uuid_student:ID!): Boolean
    "Add a people to course"
    addPeople(uuid_course: ID!, uuid_student: ID!): Course
}